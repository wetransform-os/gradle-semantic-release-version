plugins {
  id 'java-gradle-plugin'
  id 'groovy'
  id 'com.gradle.plugin-publish' version "2.0.0"
  id 'to.wetransform.conventions' version '2.1.0'
}

repositories {
  mavenCentral()
}

wetransform {
  setup {
    javaVersion(11)
    spotless {
      licenseHeader = APACHE
    }
    publish {
      // leave publishing to publish plugin
      enableMaven = false
    }
  }
}

dependencies {
  implementation libs.grgit.core

  // Testing
  testImplementation testLibs.junit.jupiter
  testRuntimeOnly testLibs.junit.platform.launcher

  testImplementation testLibs.assertj.core
}

test {
  useJUnitPlatform()
}

gradlePlugin {
  def githubUrl = 'https://github.com/wetransform-os/gradle-semantic-release-version'
  website = githubUrl
  vcsUrl = githubUrl
  plugins {
    versionPlugin {
      id = 'to.wetransform.semantic-release-version'
      implementationClass = 'to.wetransform.gradle.version.VersionPlugin'
      displayName = 'semantic-release-version'
      description = 'Gradle plugin that determines the current release or SNAPSHOT version from Git based on existing tags. Intended to be used with semantic-release.'
      tags.set([
        'semver',
        'release',
        'version',
        'semantic-release',
        'git'
      ])
    }

    configurableVersionPlugin {
      id = 'to.wetransform.semantic-release-version-custom'
      implementationClass = 'to.wetransform.gradle.version.ConfigurableVersionPlugin'
      displayName = 'semantic-release-version-custom'
      description = 'Gradle plugin that determines the current version based on information from Git and optionally a version file. Compared to the semantic-release-version plugin the behavior can be customized.'
      tags.set([
        'semver',
        'release',
        'version',
        'semantic-release'
      ])
    }
  }
}

// Add a source set and a task for a functional test suite
def functionalTest = sourceSets.create('functionalTest')
gradlePlugin.testSourceSets(functionalTest)

configurations[functionalTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)

def functionalTestTask = tasks.register('functionalTest', Test) {
  testClassesDirs = functionalTest.output.classesDirs
  classpath = configurations[functionalTest.runtimeClasspathConfigurationName] + functionalTest.output
}

tasks.check.configure {
  // Run the functional tests as part of `check`
  dependsOn(functionalTestTask)
}

tasks.wrapper {
  distributionType = Wrapper.DistributionType.ALL
  gradleVersion = '8.14.3'
}
