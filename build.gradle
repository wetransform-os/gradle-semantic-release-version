plugins {
  id 'java-gradle-plugin'
  id 'groovy'
  id 'com.gradle.plugin-publish' version "1.3.1"
  id 'to.wetransform.semantic-release-version' version '2.1.2'
}

repositories {
  mavenCentral()
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

group = "to.wetransform"

dependencies {
  implementation 'org.ajoberstar.grgit:grgit-core:5.3.0'

  // Testing
  testImplementation 'org.junit.jupiter:junit-jupiter:5.12.1'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  testImplementation("org.assertj:assertj-core:3.27.3")
}

test {
  useJUnitPlatform()
}

gradlePlugin {
  def githubUrl = 'https://github.com/wetransform-os/gradle-semantic-release-version'
  website = githubUrl
  vcsUrl = githubUrl
  plugins {
    versionPlugin {
      id = 'to.wetransform.semantic-release-version'
      implementationClass = 'to.wetransform.gradle.version.VersionPlugin'
      displayName = 'semantic-release-version'
      description = 'Gradle plugin that determines the current release or SNAPSHOT version from Git based on existing tags. Intended to be used with semantic-release.'
      tags.set(['semver', 'release', 'version', 'semantic-release', 'git'])
    }

    configurableVersionPlugin {
      id = 'to.wetransform.semantic-release-version-custom'
      implementationClass = 'to.wetransform.gradle.version.ConfigurableVersionPlugin'
      displayName = 'semantic-release-version-custom'
      description = 'Gradle plugin that determines the current version based on information from Git and optionally a version file. Compared to the semantic-release-version plugin the behavior can be customized.'
      tags.set(['semver', 'release', 'version', 'semantic-release'])
    }
  }
}

// Add a source set and a task for a functional test suite
def functionalTest = sourceSets.create('functionalTest')
gradlePlugin.testSourceSets(functionalTest)

configurations[functionalTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)

def functionalTestTask = tasks.register('functionalTest', Test) {
  testClassesDirs = functionalTest.output.classesDirs
  classpath = configurations[functionalTest.runtimeClasspathConfigurationName] + functionalTest.output
}

tasks.check.configure {
  // Run the functional tests as part of `check`
  dependsOn(functionalTestTask)
}

tasks.wrapper {
  distributionType = Wrapper.DistributionType.ALL
  gradleVersion = '8.13'
}
